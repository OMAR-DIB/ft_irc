bool Channel::hasClient(Client *client) const
{
    if (!client)
        return false;

    // Use direct pointer comparison - faster and safer
    for (size_t i = 0; i < clients.size(); i++)
    {
        if (clients[i] == client)
        {
            return true;
        }
    }
    return false;
}

bool Channel::isOperator(Client *client) const
{
    if (!client)
        return false;

    // Use direct pointer comparison
    for (size_t i = 0; i < operators.size(); i++)
    {
        if (operators[i] == client)
        {
            return true;
        }
    }
    return false;
}

void Channel::removeClient(Client *client)
{
    if (!client)
        return;

    bool wasOperator = isOperator(client);
    
    std::cout << YEL << "Removing client " << client->getNickname()
              << " (fd:" << client->GetFd() << ") from channel " << name << WHI << std::endl;

    // Remove from clients list using POINTER comparison
    for (size_t i = 0; i < clients.size();)
    {
        if (clients[i] == client)  // Direct pointer comparison
        {
            std::cout << GRE << "  -> Found and removing client at index " << i << WHI << std::endl;
            clients.erase(clients.begin() + i);
            // Don't increment i since we removed an element
        }
        else
        {
            i++;
        }
    }

    // Remove from operators list using POINTER comparison  
    for (size_t i = 0; i < operators.size();)
    {
        if (operators[i] == client)  // Direct pointer comparison
        {
            std::cout << GRE << "  -> Found and removing operator at index " << i << WHI << std::endl;
            operators.erase(operators.begin() + i);
            // Don't increment i since we removed an element
        }
        else
        {
            i++;
        }
    }

    // Rest of the method unchanged...
    std::cout << "Channel " << name << " now has " << clients.size() << " clients, "
              << operators.size() << " operators" << std::endl;

    // Auto-promote if needed
    if (wasOperator && operators.empty() && !clients.empty())
    {
        Client *newOp = clients.front();
        addOperator(newOp);
        std::cout << GRE << "Auto-promoted " << newOp->getNickname()
                  << " to operator in channel " << name << WHI << std::endl;
    }
}